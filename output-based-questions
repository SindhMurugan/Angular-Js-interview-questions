1.@Component({
  selector: 'app-demo',
  template: `
    <div *ngIf="value$ | async as value">
      {{ value }}
    </div>
  `,
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class DemoComponent implements OnInit {
  private subject = new BehaviorSubject<number>(0);
  value$ = this.subject.asObservable();
ngOnInit() {
    setTimeout(() => this.subject.next(1), 0);
    setTimeout(() => this.subject.next(2), 100);
  }
}


2.console.log('Start');
setTimeout(() => {
  console.log('Timeout');
}, 0);
Promise.resolve().then(() => {
  console.log('Promise');
});
(async () => {
  console.log('Async Start');
  await null;
  console.log('Async End');
})();
console.log('End');


3.console.log(0)
console.log(setTimeout(consol.log(1), 0))
console.log(2)

4.async function processData() {
    const buffer = await fetch();
    return buffer.filter().map();
}


5.arr = [2,3,4,5,5,6,7,8]

// 

Array.prototype.customFilter = function(cb){
    let temp =[]
    
    for(let i=0;i<this.length;i++){
        if(cb(this[i] , i , this)){
            temp = [...temp , this[i]]
        }
        
    }
    return temp
}


Array.prototype.customReduce = function(cb){
    // let value =0
    let initialVal =0
    
    for(let i=0;i<this.length;i++){
        initialVal = cb(initialVal,this[i] , i,this)   
    }
    
    return initialVal
}

Array.prototype.customMap = function(cb){
    let temp =[]
    for(let i=0;i<this.length;i++){
        temp = [...temp , cb(this[i] , i,this)]
    }
    return temp
}

let reduce = arr.customReduce((acc, cur, index,self) => acc+cur , 0)
console.log(reduce , 'reduce')

let filter = arr.customFilter((acc, index,self) => acc > 2)
console.log(filter ,'filter')



let map =arr.customMap((item,index,self) => item*2)
console.log("map" , map)


